// Generated by CoffeeScript 1.4.0
var CanvasRendererComponent, Direction, KeyboardInputComponent, Kovas, Map, Player, Scorer, Tile,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.requestAnimationFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(f) {
    return window.setTimeout(f, 1e3 / 60);
  };
})();

document.addEventListener('DOMContentLoaded', function() {
  var game;
  game = new Kovas({
    renderer: new CanvasRendererComponent(document.getElementById('kovas')),
    input: new KeyboardInputComponent
  });
  return game.run();
});

CanvasRendererComponent = (function() {

  function CanvasRendererComponent(element) {
    this.element = element;
    this.width = window.innerWidth;
    this.height = window.innerHeight;
  }

  CanvasRendererComponent.prototype.start = function() {
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.width - 50;
    this.canvas.height = this.height - 50;
    this.ctx = this.canvas.getContext('2d');
    return this.element.appendChild(this.canvas);
  };

  CanvasRendererComponent.prototype.drawScore = function(score) {
    this.ctx.save();
    this.ctx.translate(0, -20);
    this.ctx.font = "normal 20px Share Tech Mono";
    this.ctx.fillStyle = '#fff';
    this.ctx.fillText("Score: " + score, 0, 0);
    return this.ctx.restore();
  };

  CanvasRendererComponent.prototype.drawEmptyTile = function(x, y) {
    return true;
  };

  CanvasRendererComponent.prototype.drawWallTile = function(x, y) {
    this.ctx.save();
    this.ctx.fillStyle = '#00f';
    this.ctx.fillRect(x * 25, y * 25, 25, 25);
    return this.ctx.restore();
  };

  CanvasRendererComponent.prototype.drawFoodTile = function(x, y) {
    x = (x * 25) + 10;
    y = (y * 25) + 10;
    this.ctx.save();
    this.ctx.fillStyle = '#fff';
    this.ctx.fillRect(x, y, 5, 5);
    return this.ctx.restore();
  };

  CanvasRendererComponent.prototype.drawPlayer = function(x, y) {
    x *= 25;
    y *= 25;
    this.ctx.save();
    this.ctx.fillStyle = '#ff0';
    this.ctx.fillRect(x, y, 25, 25);
    return this.ctx.restore();
  };

  CanvasRendererComponent.prototype.clear = function() {
    this.ctx.restore();
    this.ctx.clearRect(0, 0, this.width, this.height);
    this.ctx.save();
    return this.ctx.translate(0, 40);
  };

  return CanvasRendererComponent;

})();

KeyboardInputComponent = (function() {
  var MAPPING;

  MAPPING = {
    'left': 37,
    'right': 39,
    'down': 40,
    'up': 38
  };

  function KeyboardInputComponent() {
    this.keyUp = __bind(this.keyUp, this);

    this.keyDown = __bind(this.keyDown, this);
    true;
  }

  KeyboardInputComponent.prototype.start = function() {
    this.keys = [];
    window.onkeydown = this.keyDown;
    return window.onkeyup = this.keyUp;
  };

  KeyboardInputComponent.prototype.isKeyDown = function(key) {
    return this.keys[MAPPING[key]];
  };

  KeyboardInputComponent.prototype.keyDown = function(e) {
    this.keys[e.keyCode] = true;
    if (e.keyCode >= 37 && e.keyCode <= 40) {
      return false;
    }
  };

  KeyboardInputComponent.prototype.keyUp = function(e) {
    return this.keys[e.keyCode] = false;
  };

  KeyboardInputComponent.prototype.moveLeft = function() {
    return this.isKeyDown('left');
  };

  KeyboardInputComponent.prototype.moveRight = function() {
    return this.isKeyDown('right');
  };

  KeyboardInputComponent.prototype.moveUp = function() {
    return this.isKeyDown('up');
  };

  KeyboardInputComponent.prototype.moveDown = function() {
    return this.isKeyDown('down');
  };

  return KeyboardInputComponent;

})();

Tile = {
  empty: 0,
  wall: 1,
  food: 2
};

Map = (function() {
  var MAPS;

  MAPS = [
    {
      data: "####################\n#....#........#....#\n#.##.#.######.#.##.#\n#.#..............#.#\n#.#.##.#.####.##.#.#\n#......#....#......#\n#.#.##.####.#.##.#.#\n#.#..#...........#.#\n#.##.#.######.#.##.#\n#....#........#....#\n####################"
    }
  ];

  function Map(levelIndex) {
    this.levelIndex = levelIndex != null ? levelIndex : 0;
    this.tiles = {};
    this.width = 0;
    this.height = 0;
    this._loadLevel(MAPS[this.levelIndex].data);
  }

  Map.prototype.tileType = function(x, y) {
    if (!this.isInBounds(x, y)) {
      return void 0;
    }
    return this.tiles[y][x];
  };

  Map.prototype.isInBounds = function(x, y) {
    return (x >= 0 && x <= this.width) && (y >= 0 && y <= this.height);
  };

  Map.prototype.eatFood = function(x, y) {
    return this.tiles[y][x] = Tile.empty;
  };

  Map.prototype._loadLevel = function(data) {
    var char, index, x, y, _base, _base1, _i, _len, _ref, _results;
    x = 0;
    y = 0;
    _ref = data.split('');
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      char = _ref[index];
      if (char === "\n") {
        y += 1;
        _results.push(x = 0);
      } else {
        if (x > this.width) {
          this.width = x;
        }
        if (y > this.height) {
          this.height = y;
        }
        switch (char) {
          case ".":
            (_base = this.tiles)[y] || (_base[y] = {});
            this.tiles[y][x] = Tile.food;
            _results.push(x += 1);
            break;
          case "#":
            (_base1 = this.tiles)[y] || (_base1[y] = {});
            this.tiles[y][x] = Tile.wall;
            _results.push(x += 1);
            break;
          default:
            throw "Don't know what to do with " + (char.charCodeAt(0)) + " " + char + "!";
        }
      }
    }
    return _results;
  };

  return Map;

})();

Direction = {
  left: 0,
  right: 1,
  up: 2,
  down: 3
};

Player = (function() {
  var MOVE_DELAY;

  MOVE_DELAY = 20;

  function Player(map) {
    this.map = map;
    this.x = 1;
    this.y = 1;
    this.direction = Direction.down;
    this.nextMoveIn = MOVE_DELAY;
  }

  Player.prototype.update = function() {
    var newPosition;
    this.nextMoveIn -= 1;
    if (this.nextMoveIn <= 0) {
      newPosition = this.newPosition(this.direction);
      if (newPosition) {
        this.x = newPosition[0], this.y = newPosition[1];
        return this.nextMoveIn = MOVE_DELAY;
      }
    }
  };

  Player.prototype.canMove = function(direction) {
    return this.newPosition(direction) !== void 0;
  };

  Player.prototype.newPosition = function(direction) {
    var newX, newY;
    newX = this.x;
    newY = this.y;
    switch (direction) {
      case Direction.left:
        newX -= 1;
        break;
      case Direction.right:
        newX += 1;
        break;
      case Direction.up:
        newY -= 1;
        break;
      case Direction.down:
        newY += 1;
    }
    if (this.map.tileType(newX, newY) !== Tile.wall) {
      return [newX, newY];
    } else {
      return void 0;
    }
  };

  Player.prototype.moveLeft = function() {
    if (this.canMove(Direction.left)) {
      return this.direction = Direction.left;
    }
  };

  Player.prototype.moveRight = function() {
    if (this.canMove(Direction.right)) {
      return this.direction = Direction.right;
    }
  };

  Player.prototype.moveUp = function() {
    if (this.canMove(Direction.up)) {
      return this.direction = Direction.up;
    }
  };

  Player.prototype.moveDown = function() {
    if (this.canMove(Direction.down)) {
      return this.direction = Direction.down;
    }
  };

  return Player;

})();

Scorer = (function() {

  function Scorer(map, player) {
    this.map = map;
    this.player = player;
    this.score = 0;
  }

  Scorer.prototype.update = function() {
    if (this.map.tileType(this.player.x, this.player.y) === Tile.food) {
      this.map.eatFood(this.player.x, this.player.y);
      return this.incrementScore();
    }
  };

  Scorer.prototype.incrementScore = function() {
    return this.score += 10;
  };

  return Scorer;

})();

Kovas = (function() {

  function Kovas(options) {
    this.options = options;
    this.update = __bind(this.update, this);

    true;
  }

  Kovas.prototype.run = function() {
    this.map = new Map();
    this.player = new Player(this.map);
    this.scorer = new Scorer(this.map, this.player);
    this.options.input.start();
    this.options.renderer.start();
    return window.requestAnimationFrame(this.update);
  };

  Kovas.prototype.update = function() {
    var x, y, _i, _j, _ref, _ref1;
    if (this.options.input.moveLeft()) {
      this.player.moveLeft();
    }
    if (this.options.input.moveRight()) {
      this.player.moveRight();
    }
    if (this.options.input.moveUp()) {
      this.player.moveUp();
    }
    if (this.options.input.moveDown()) {
      this.player.moveDown();
    }
    this.player.update();
    this.scorer.update();
    this.options.renderer.clear();
    this.options.renderer.drawScore(this.scorer.score);
    for (y = _i = 0, _ref = this.map.height; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
      for (x = _j = 0, _ref1 = this.map.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        switch (this.map.tileType(x, y)) {
          case Tile.empty:
            this.options.renderer.drawEmptyTile(x, y);
            break;
          case Tile.wall:
            this.options.renderer.drawWallTile(x, y);
            break;
          case Tile.food:
            this.options.renderer.drawFoodTile(x, y);
        }
      }
    }
    this.options.renderer.drawPlayer(this.player.x, this.player.y);
    return window.requestAnimationFrame(this.update);
  };

  return Kovas;

})();
